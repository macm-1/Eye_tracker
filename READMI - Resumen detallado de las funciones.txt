Resumen detallado de las funciones más importantes (esto solamente respecto a Eye_tracker_ET.py, pero lamentablemente no funcionó adecuadamente).

1.	process_all_subjects
Procesa múltiples archivos de EyeLink iterativamente. Para cada archivo, filtra eventos como sacadas y blinks, selecciona canales de pupila ('LEFT' o 'RIGHT') y aplica filtros de frecuencia (0.5-30 Hz) para eliminar ruido. Si el archivo contiene datos válidos, genera gráficos para visualizar los resultados procesados.
2.	directory_eyelink_file
Crea un directorio para almacenar archivos preprocesados si no existe. Retorna la ruta del archivo filtrado que incluirá datos limpios tras el procesamiento.
3.	filter_saccades
Filtra eventos irrelevantes como 'ESACC', 'SFIX', entre otros, para eliminar sacadas y otros datos no deseados. Guarda los datos restantes en un nuevo archivo con el sufijo _no_saccades.
4.	filter_eyelink_data
Carga los datos filtrados y convierte la señal en un objeto Raw de MNE. Aplica un filtro de frecuencia entre 0.5 y 30 Hz para mejorar la calidad de la señal, y selecciona canales de pupila relevantes ('LEFT' o 'RIGHT') para análisis posterior.
5.	create_raw_et
Convierte los datos filtrados a un objeto RawArray de MNE. Detecta eventos 'START' y 'END' para dividir los datos en épocas. Esto permite un análisis detallado por segmentos.
6.	load_and_process_eyelink_data
Carga archivos de EyeLink como DataFrames. Filtra las cinco primeras columnas y extrae el diámetro pupilar de la cuarta columna para su análisis.
7.	plot_data
Visualiza los datos procesados utilizando la función de graficado de MNE. Los gráficos muestran la evolución de la señal pupilar procesada, destacando eventos relevantes.
8.	filter_signal
Aplica un filtro pasa banda (0.5-30 Hz) para eliminar artefactos y ruido de baja frecuencia (como movimientos lentos) y altas frecuencias (como ruido eléctrico) en los datos pupilares.
procesamiento:
9.	interpolate_blinks
Interpola datos faltantes debidos a parpadeos detectados en el canal de pupila. Utiliza funciones de MNE para sustituir estas interrupciones con valores estimados, garantizando la continuidad de la señal pupilar.
10.	read_and_filter_data
Lee los datos crudos desde el archivo de EyeLink línea por línea. Filtra filas basándose en condiciones específicas, como la ausencia de puntos decimales en las primeras columnas o la presencia de valores irrelevantes como "0,0" en la tercera columna.
11.	select_pupil_channels
Verifica si los canales de pupila ('LEFT' o 'RIGHT') están presentes en los datos procesados. Selecciona el canal válido para continuar con el análisis. Si ambos están disponibles, prioriza uno para evitar conflictos.
12.	create_epochs_from_lines
Divide los datos en épocas basándose en eventos delimitadores 'START' y 'END'. Cada época representa un bloque temporal que puede ser analizado de manera independiente, lo que es útil para identificar patrones específicos en cada segmento.
13.	handle_start y handle_end
Gestionan los eventos 'START' y 'END'. handle_start inicializa una nueva época cuando encuentra un evento de inicio, mientras que handle_end completa y almacena la época actual cuando detecta un evento de cierre.
14.	process_eyelink_file
Procesa un archivo individual de EyeLink, asegurando que los datos sean preprocesados y filtrados. Combina múltiples pasos, desde el filtrado de sacadas hasta la selección de canales, y genera archivos intermedios para facilitar análisis posteriores.
15.	get_pupil_channel
Identifica el canal de pupila ('LEFT' o 'RIGHT') dentro de los datos crudos. Este paso es esencial para trabajar con el canal correcto en las etapas posteriores de procesamiento.
16.	save_filtered_file (implícita en los métodos)
Guarda los datos filtrados en archivos separados. Esto evita sobrescribir el archivo original y garantiza la conservación de los datos crudos para futuras referencias o análisis.
17.	plot_data
Genera una representación gráfica de los datos pupilares procesados. Utiliza escalas específicas para destacar eventos clave y permite visualizar artefactos o resultados del procesamiento.

